1719582952
waR3U4bTeM%3A291b76f29ecf1f6ca9a313e7ebbad05d-1258a23e19d0633715e041a6ec7e5886
s:11800:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"1258a23e19d0633715e041a6ec7e5886";s:39:" phpDocumentor\Reflection\Php\File name";s:9:"admin.php";s:39:" phpDocumentor\Reflection\Php\File path";s:22:"webdir/admin/admin.php";s:41:" phpDocumentor\Reflection\Php\File source";s:6839:"<?php
define("rep", 1);

require "../common.php";

?>

<head>
    <?php require '../templates/head.php' ?>
</head>
<?php require '../templates/header.php' ?>

<?php
if (isset($_SESSION['ID'])) {
    if ($_SESSION['ID'] != 1) {
        http_response_code(403); exit;
    }

?>

<body>

<div id="dialog-confirm" title="Delete User?" style="display: None">
  <p><span class="ui-icon ui-icon-alert" style="float:left; margin:12px 12px 20px 0;"></span>This user will be deleted. Are you sure?</p>
</div>


<div id="dialog-confirm-pass" title="Change password?" style="display: None">
  <p><span class="ui-icon ui-icon-alert" style="float:left; margin:12px 12px 20px 0;"></span>Really change password?</p>
</div>

<div class="contailer-fluid d-flex p-2 flex-column justify-content-center align-items-center">

    <div>
        <input type="test" id="search-box" class="form-control align-items-center" placeholder="User email: " />
        <div id="user-search"></div>
    </div>

    <script>

    /**
     * Function that creates an autocomplete feature for the emails when searching in the admin panel using JQuery AJAX
     * The function searches the database with a LIKE SQL statement on every keypress
     */
    $(document).ready(function() {
        $("#search-box").keyup(function() {
            console.log("Here");
            $.ajax({
                type: "POST",
                url: "/admin/get_user_data.php",
                data: 'MAIL=' + $(this).val(),
                beforeSend: function() {
                    $("#search-box").css("background", "#FFF url(LoaderIcon.gif) no-repeat 165px");
                },
                success: function(data) {
                    $("#user-search").show();
                    $("#user-search").html(data);
                    $("#search-box").css("background", "#FFF");
                }
            });
        });
        });

    function selectCountry(val) {
        $("#search-box").val(val);
        $("#user-search").hide();
    }

    /**
     * This function handels the deletion of a user via JQuery AJAX so as to not have to jump between sites
     */
    $(document).ready(function(){
        $( "#delForm" ).on( "submit", function( event ) {
            event.preventDefault()
            $( "#dialog-confirm" ).dialog({
            resizable: false,
            height: "auto",
            width: 400,
            modal: true,
            buttons: {
                "Delete": function() {
                    $.ajax({
                        type: "POST",
                        url: "/admin/userDelete.php",
                        data: 'ID=' + $("#ID_del").val(),
                        success: function(data) {
                            alert( "User deleted" );
                        }
                    });
                    $( this ).dialog( "close" );
                },
                Cancel: function() {
                $( this ).dialog( "close" );
                }
            }
            });

        });
        });
    

    /**
     * This function handels the change of a users passsword via JQuery AJAX so as to not have to jump between sites
     */
    $(document).ready(function(){
        $( "#update_pass" ).on( "submit", function( event ) {
            event.preventDefault()
            $( "#dialog-confirm-pass" ).dialog({
            resizable: false,
            height: "auto",
            width: 400,
            modal: true,
            buttons: {
                "Change": function() {
                    $.ajax({
                        type: "POST",
                        url: "/admin/changePassword.php",
                        data: {ID: $("#ID").val(), PASS: + $("#PASS").val()},
                        success: function(data) {
                            alert( "Password changed" );
                        }
                    });
                    $( this ).dialog( "close" );
                },
                Cancel: function() {
                $( this ).dialog( "close" );
                }
            }
            });

        });
        });

    /**
     * This function handels the addition of recipie categories via JQuery AJAX so as to not have to jump between sites
     */
     $(document).ready(function(){
        $( "#cat" ).on( "submit", function( event ) {
            event.preventDefault()
            $.ajax({
                type: "POST",
                url: "/admin/add_category.php",
                data: 'NAME=' + $("#NAME").val(),
                success: function(data) {
                    alert( "Category added" );
                }
                });
            });
        });
</script>

<!--<body> -->
    <div class="form-container">
        <div style="display: block;" class="form-content active-choice"  >
            <form id="delForm" class="form-control">
                <label for="ID_del">User to delete:</label>
                <input type="number" class="form-control" id="ID_del" name="ID" required>
                <input type="submit" class="form-control align-items-center" value="Löschen">
            </form>
        </div>
    </div>
    <div class="form-container">
        <div style="display: block;" class="form-content active-choice">
            <form class="form-control" id="update_pass" method="post">
                <label for="ID">User ID to update password:</label>
                <input type="number" id="ID" class="form-control" name="ID" required>
                
                <label for="ID">New Password:</label>
                <input type="PASS" class="form-control" id="PASS" name="PASS" required>
                
                <input type="submit" class="form-control" value="Update Password">
            </form>
        </div>
    </div>
    <div class="form-container">
        <div style="display: block;" id="loginForm" class="form-content active-choice">
            <form action="/admin/get_json.php" class="form-control" method="post">
                <label class="form-control" for="ID">Export user data of ID:</label>
                <input type="ID" id="ID" class="form-control" name="ID" required>
            </form>
        </div>
    </div>
    <div class="form-container">
        <div style="display: block;" class="form-control" class="form-content active-choice">
            <form id="cat">
                <label for="ID">Enter name of new category: </label>
                <input type="text" class="form-control" id="NAME" name="Name of category" required>
                <input type="submit" class="form-control align-items-center" value="add category">
            </form>
        </div>
    </div>
</div>
</body>

<?php
}
else {
    // Access control
    http_response_code(403); exit;
}

/*
foreach ($_SESSION as $sess => $value) {
    print_r($value);
}
*/

?>

</body>
</html>
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:1:{s:4:"\rep";O:37:"phpDocumentor\Reflection\Php\Constant":8:{s:44:" phpDocumentor\Reflection\Php\Constant fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:4:"\rep";s:36:" phpDocumentor\Reflection\Fqsen name";s:3:"rep";}s:47:" phpDocumentor\Reflection\Php\Constant docBlock";N;s:44:" phpDocumentor\Reflection\Php\Constant value";s:1:"1";s:47:" phpDocumentor\Reflection\Php\Constant location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:2;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Constant endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:2;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:49:" phpDocumentor\Reflection\Php\Constant visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:44:" phpDocumentor\Reflection\Php\Constant final";b:0;s:47:" phpDocumentor\Reflection\Php\Constant metadata";a:0:{}}}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";